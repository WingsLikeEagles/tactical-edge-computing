version: 0.2

env:
  variables:
    REST_IMAGE:  "official-fd-supply-rest-service"
    REST_TAG:    "latest"
    PROXY_IMAGE: "official-fd-reverse-proxy"
    PROXY_TAG:   "latest"

phases:

  install:
    commands:
      - echo "install stage beginning"
      - env | sort
      - test "$AWS_ACCOUNT_ID" || { echo 'AWS_ACCOUNT_ID env variable not set!'; exit 1; }
      - which apt
      - apt list --installed
      - apt-get update -y
      - echo "searching for python packages"
      # - apt-cache search python
      - apt-get install -f python3.4-dev python3.4-venv -y
      - REST_REPO_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REST_IMAGE
      - PROXY_REPO_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$PROXY_IMAGE
    finally:
      - echo "install stage finishing"

  pre_build:
    commands:
      - echo "pre_build stage beginning"
      - docker images list
      - docker container list -a
      - echo "Logging in to Amazon ECR..."
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
      - echo "Creating python 3.6 virtualenv"
      - cd src; make django-env PYTHON_VERSION=3.4
      - echo "collecting Django Static Resources for the Nginx Proxy"
      - cd src; make django-collect-static PYTHON_VERSION=3.4
    finally:
      - echo "pre_build stage finishing"

  build:
    commands:
      - echo "build stage beginning"
      - docker build src/fd_supply_services/ -t $REST_IMAGE:$REST_TAG
      - docker tag $REST_IMAGE:$REST_TAG $REST_REPO_URI
      - docker build src/reverse-proxy/ -t $PROXY_IMAGE:$PROXY_TAG
      - docker tag $PROXY_IMAGE:$PROXY_TAG $PROXY_REPO_URI
    finally:
      - echo "build stage finishing"
      - docker images
      - docker container list --all

  post_build:
    commands:
      - echo "post_build stage beginning"
      - docker save -o ${REST_IMAGE}-${REST_TAG}.tar $REST_IMAGE:$REST_TAG
      - docker save -o ${PROXY_IMAGE}-${PROXY_TAG}.tar $PROXY_IMAGE:$PROXY_TAG
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$REST_IMAGE
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$PROXY_IMAGE
    finally:
      - echo "post_build stage finishing"
      - echo "Writing image definitions file..."
      - printf '[{"name":"%s","imageUri":"%s"}]' $REST_IMAGE $REST_REPO_URI > ${REST_IMAGE}-definitions.json
      - printf '[{"name":"%s","imageUri":"%s"}]' $PROXY_IMAGE $PROXY_REPO_URI > ${PROXY_IMAGE}-definitions.json

artifacts:
  files:
    - ${REST_IMAGE}-${REST_TAG}.tar
    - ${PROXY_IMAGE}-${PROXY_TAG}.tar
    - ${REST_IMAGE}-definitions.json
  discard-paths: yes
  base-directory: .

