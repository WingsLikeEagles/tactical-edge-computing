AWSTemplateFormatVersion: 2010-09-09

Description: >-
  Creates a standalone application vpc and deploys a sample web application
  with reverse proxy, ELBs, RDS, and other resources required for application
  development, testing, and deployment.

Metadata:
  Stack:
    Value: 3
  VersionDate:
    Value: 20180726
  Identifier:
    Value: template-application
  Input:
    Description: >-
      All your input are belong to me.
  Output:
    Description: Outputs ID of all deployed resources
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Region Config
        Parameters:
          - pEC2KeyPair
          - pAvailabilityZone1
          - pAvailabilityZone2
          - pDeploymentType
      - Label:
          default: Network (new VPC config)
        Parameters:
          - pVPCCidrRange
          - pPublicSubnetCidrRange1
          - pPublicSubnetCidrRange2
          - pPrivateSubnetCidrRange1
          - pPrivateSubnetCidrRange2

Parameters:

  pBastionKeyPair:
    Description: Name of EC2 key pair used to log into Bastion instances.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: 'bssimpk-dev'

  pAvailabilityZone1:
    Description: 'Availability Zone #1'
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Default: 'us-east-1a'

  pAvailabilityZone2:
    Description: 'Availability Zone #2'
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Default: 'us-east-1b'

  pVPCCidrRange:
    Description: 'CIDR Block Range for the application VPC'
    Type: String
    Default: '10.200.0.0/16'

  pPublicSubnetCidrRange1:
    Description: 'CIDR Block Range for Public Subnet 1'
    Type: String
    Default: '10.200.100.0/24'

  pPublicSubnetCidrRange2:
    Description: 'CIDR Block Range for Public Subnet 2'
    Type: String
    Default: '10.200.102.0/24'

  pPrivateSubnetCidrRange1:
    Description: 'CIDR Block Range for Private Subnet 1'
    Type: String
    Default: '10.200.200.0/24'

  pPrivateSubnetCidrRange2:
    Description: CIDR Block Range for Private Subnet 2
    Type: String
    Default: '10.200.202.0/24'

  pDeploymentType:
    Description: Deployment Type
    Type: String
    Default: 'PRODUCTION'
    AllowedValues:
      - 'DEVELOPMENT'
      - 'TEST'
      - 'PRODUCTION'

  pReverseProxyDomainName:
    Description: Deployment Type
    Type: String
    Default: 'zoidberg.dev.simpkins.cloud'

  pBastionInstanceType:
    Description: Bastion Host EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: Must be a valid EC2 instance type.


##############################################################################
#
#  Mappings
#
#######################################################################

Mappings:

  mMapInstanceTypeToArch:
    t2.small:  { Arch: HVM64 }
    t2.medium: { Arch: HVM64 }
    t2.large:  { Arch: HVM64 }

  mMapRegionArchToAmazonLinux1AMI:
    us-east-1:
      HVM64: ami-cfe4b2b0


##############################################################################
#
#  Resources
#
#######################################################################

Resources:

  #
  # Region - VPC and Subnets
  #

  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: { Ref: pVPCCidrRange }
      Tags:
        - Key: Name
          Value: { Ref: 'AWS::StackName' }

  rPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: { Ref: pAvailabilityZone1 }
      CidrBlock: { Ref: pPublicSubnetCidrRange1 }
      MapPublicIpOnLaunch: true
      VpcId: { Ref: rVPC }
      Tags:
        - Key: Name
          Value: { Ref: 'AWS::StackName' }

  rPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: { Ref: pAvailabilityZone2 }
      CidrBlock: { Ref: pPublicSubnetCidrRange2 }
      MapPublicIpOnLaunch: true
      VpcId: { Ref: rVPC }
      Tags:
        - Key: Name
          Value: { Ref: 'AWS::StackName' }

  rPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: { Ref: pAvailabilityZone1 }
      CidrBlock: { Ref: pPrivateSubnetCidrRange1 }
      MapPublicIpOnLaunch: false
      VpcId: { Ref: rVPC }
      Tags:
        - Key: Name
          Value: { Ref: 'AWS::StackName' }

  rPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: { Ref: pAvailabilityZone2 }
      CidrBlock: { Ref: pPrivateSubnetCidrRange2 }
      MapPublicIpOnLaunch: false
      VpcId: { Ref: rVPC }
      Tags:
        - Key: Name
          Value: { Ref: 'AWS::StackName' }

  #
  # Network - Gateways and Routes
  #

  rInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: { Ref: 'AWS::StackName' }

  rInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: { Ref: rInternetGateway }
      VpcId: { Ref: rVPC }

  rPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: { Ref: rVPC }
      Tags:
        - Key: Name
          Value: { Ref: 'AWS::StackName' }

  rPublicRouteToInternetGateway:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: { Ref: rInternetGateway }
      RouteTableId: { Ref: rPublicRouteTable }

  rPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPublicSubnet1
      RouteTableId: !Ref rPublicRouteTable

  rPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPublicSubnet2
      RouteTableId: !Ref rPublicRouteTable

  rNatGatewayElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: rVPC

  rNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'rNatGatewayElasticIP.AllocationId'
      SubnetId: { Ref: rPrivateSubnet1 }
      Tags:
        - Key: Name
          Value: { Ref: 'AWS::StackName' }

  rPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: { Ref: rVPC }
      Tags:
        - Key: Name
          Value: { Ref: 'AWS::StackName' }

  rPrivateRouteToNatGateway:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: { Ref: rNatGateway }
      RouteTableId: { Ref: rPrivateRouteTable }

  rPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPrivateSubnet1
      RouteTableId: !Ref rPrivateRouteTable

  rPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPrivateSubnet2
      RouteTableId: !Ref rPrivateRouteTable

  #
  # Network - Security Groups
  #

  rPublicWebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for incoming public web traffic'
      VpcId: !Ref rVPC
      SecurityGroupIngress:
        - Description: 'Allows HTTPS traffic from all IPs'
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: { Ref: 'AWS::StackName' }

  rPublicBastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for incoming public bastion traffic'
      VpcId: !Ref rVPC
      SecurityGroupIngress:
        - Description: 'Allows SSH traffic from all IPs'
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Name
          Value: { Ref: 'AWS::StackName' }

  # Ensure this traffic ONLY comes from services inside the public subnets!
  rPrivateReverseProxyContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for incoming reverse proxy traffic'
      VpcId: !Ref rVPC
      SecurityGroupIngress:
        - Description: 'Allows HTTPS traffic from all the public ELB'
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref rPublicWebSecurityGroup
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: { Ref: 'AWS::StackName' }

  #
  # EC2 - Bastion Hosts
  #

  rPublicBastion1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref pBastionInstanceType
      SecurityGroupIds:
        - !Ref rPublicBastionSecurityGroup
      KeyName: !Ref pBastionKeyPair
      SubnetId: !Ref rPublicSubnet1
      ImageId:
        Fn::FindInMap:
        - mMapRegionArchToAmazonLinux1AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - mMapInstanceTypeToArch
          - Ref: pBastionInstanceType
          - Arch
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - 'public-bastion'
              - !Ref 'AWS::StackName'
              - !GetAtt 'rPublicSubnet1.AvailabilityZone'

  rPublicBastion2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref pBastionInstanceType
      SecurityGroupIds:
        - !Ref rPublicBastionSecurityGroup
      KeyName: !Ref pBastionKeyPair
      SubnetId: !Ref rPublicSubnet2
      ImageId:
        Fn::FindInMap:
        - mMapRegionArchToAmazonLinux1AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - mMapInstanceTypeToArch
          - Ref: pBastionInstanceType
          - Arch
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - 'public-bastion'
              - !Ref 'AWS::StackName'
              - !GetAtt 'rPublicSubnet2.AvailabilityZone'

  #
  # EC2 - Public ELB For the Reverse Proxy
  #

  rPublicReverseProxyNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ['-', ['public-nlb-rp', !Ref 'AWS::StackName']]
      Scheme: internet-facing
      Subnets: [!Ref rPublicSubnet1, !Ref rPublicSubnet2]
      # SecurityGroups: [!Ref rPublicWebSecurityGroup]
      Type: network


  # This is a role which is used by the ECS tasks themselves.
  rFargateTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      RoleName: !Join ['-', [!Ref 'AWS::StackName', 'fargate-role' ]]

  #
  # ECS - Reverse Proxy Cluster
  #

  rFargateReverseProxyCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['-', [!Ref 'AWS::StackName', 'reverse-proxy-cluster']]

  #
  # It is absolutely critical to have a log group with fargate!
  #
  rFargateReverseProxyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/fargate/', !Ref 'AWS::StackName', '-rp-service' ]]
      RetentionInDays: 365


  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  rFargateReverseProxyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [!Ref 'AWS::StackName', 'reverse-proxy-td-family']]
      Cpu: 1024
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref rFargateTaskExecutionRole
      # TaskRoleArn:
      #   Fn::If:
      #     - 'HasCustomRole'
      #     - !Ref 'Role'
      #     - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: reverse-proxy-container
          Cpu: 1024
          Memory: 2048
          # Image: !Join ['-', [!Ref 'AWS::AccountId', '.dkr.ecr.us-east-1.amazonaws.com/official-fd-reverse-proxy']]
          Image: 873587440474.dkr.ecr.us-east-1.amazonaws.com/official-fd-reverse-proxy
          PortMappings:
            - ContainerPort: 443
          Environment:
            - Name: DEPLOYMENT_TYPE
              Value: !Ref pDeploymentType
            - Name: REVERSE_PROXY_FQDN
              Value: !Ref pReverseProxyDomainName
            - Name: SUPPLY_SERVICE_FQDN
              Value: localhost
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref rFargateReverseProxyLogGroup
              awslogs-stream-prefix: fargate

  # The health checks can be further tuned if your requirements differ
  rFargateReverseProxyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ['-', [!Ref 'AWS::StackName', 'rp-tg']]
      VpcId: !Ref rVPC
      Port: 443
      Protocol: TCP
      # Matcher:
      #   HttpCode: 200
      #HealthCheckIntervalSeconds: 10
      HealthCheckPath: /404.html
      HealthCheckProtocol: HTTPS
      # HealthCheckTimeoutSeconds: 5
      # HealthyThresholdCount: 2
      # TargetGroupAttributes:
      # - Key: deregistration_delay.timeout_seconds
      #   Value: 300
      TargetType: ip
      Tags:
        - Key: Name
          Value: { Ref: 'AWS::StackName' }
    DependsOn: [rPublicReverseProxyNLB]

  rFargateReverseProxyELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref rPublicReverseProxyNLB
      Port: 443
      Protocol: TCP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref rFargateReverseProxyTargetGroup

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  rFargateReverseProxyService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Join ['-', [!Ref 'AWS::StackName', 'reverse-proxy-service']]
      Cluster: !Ref rFargateReverseProxyCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          # SecurityGroups: [!Ref rPrivateReverseProxyContainerSecurityGroup]
          # Subnets: [!Ref rPrivateSubnet1, !Ref rPrivateSubnet2]
          SecurityGroups: [!Ref rPublicWebSecurityGroup]
          Subnets: [!Ref rPublicSubnet1, !Ref rPublicSubnet2]

      TaskDefinition: !Ref rFargateReverseProxyTaskDefinition
      LoadBalancers:
        - ContainerName: reverse-proxy-container
          ContainerPort: 443
          TargetGroupArn: !Ref rFargateReverseProxyTargetGroup
    DependsOn: [rPublicReverseProxyNLB, rFargateReverseProxyTargetGroup, rFargateReverseProxyELBListener]




