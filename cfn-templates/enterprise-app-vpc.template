AWSTemplateFormatVersion: 2010-09-09

Description: >-
  Creates a standalone application vpc and deploys a sample web application
  with reverse proxy, ELBs, RDS, and other resources required for application
  development, testing, and deployment.

Metadata:
  Stack:
    Value: 3
  VersionDate:
    Value: 20180726
  Identifier:
    Value: template-application
  Input:
    Description: >-
      All your input are belong to me.
  Output:
    Description: Outputs ID of all deployed resources
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Region Config
        Parameters:
          - pEC2KeyPair
          - pAvailabilityZone1
          - pAvailabilityZone2
          - pDeploymentType
      - Label:
          default: Network (new VPC config)
        Parameters:
          - pVPCCidrRange
          - pPublicSubnetCidrRange1
          - pPublicSubnetCidrRange2
          - pPrivateSubnetCidrRange1
          - pPrivateSubnetCidrRange2

Parameters:

  pBastionKeyPair:
    Description: Name of EC2 key pair used to log into Bastion instances.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: 'bssimpk-dev'

  pAvailabilityZone1:
    Description: 'Availability Zone #1'
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Default: 'us-east-1a'

  pAvailabilityZone2:
    Description: 'Availability Zone #2'
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Default: 'us-east-1b'

  pVPCCidrRange:
    Description: 'CIDR Block Range for the application VPC'
    Type: String
    Default: '10.200.0.0/16'

  pPublicSubnetCidrRange1:
    Description: 'CIDR Block Range for Public Subnet 1'
    Type: String
    Default: '10.200.100.0/24'

  pPublicSubnetCidrRange2:
    Description: 'CIDR Block Range for Public Subnet 2'
    Type: String
    Default: '10.200.102.0/24'

  pPrivateSubnetCidrRange1:
    Description: 'CIDR Block Range for Private Subnet 1'
    Type: String
    Default: '10.200.200.0/24'

  pPrivateSubnetCidrRange2:
    Description: CIDR Block Range for Private Subnet 2
    Type: String
    Default: '10.200.202.0/24'

  pDeploymentType:
    Description: Deployment Type
    Type: String
    Default: 'PRODUCTION'
    AllowedValues:
      - 'DEVELOPMENT'
      - 'TEST'
      - 'PRODUCTION'

  pReverseProxyDomainName:
    Description: Deployment Type
    Type: String
    Default: 'zoidberg.dev.simpkins.cloud'

  pBastionInstanceType:
    Description: Bastion Host EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: Must be a valid EC2 instance type.

  # useful to override during development for faster iterations - the AWS
  # API_TargetGroupAttribute deregistration_delay.timeout_seconds is 300
  # second (5 min)
  pELBDeregistrationDelay:
    Description: The amount time (in seconds) to wait before changing the state of a deregistering target from draining to unused.
    Type: Number
    Default: 0
    ConstraintDescription: Must be in the range [0-3600]
    MinValue: 0
    MaxValue: 3600

  pRDSPassword:
    Description: Password for the RDS Postgres database
    Type: String
    Default: 'Changeme'

##############################################################################
#
#  Mappings
#
#######################################################################

Mappings:

  mMapInstanceTypeToArch:
    t2.small:  { Arch: HVM64 }
    t2.medium: { Arch: HVM64 }
    t2.large:  { Arch: HVM64 }

  mMapRegionArchToAmazonLinux1AMI:
    us-east-1:
      HVM64: ami-cfe4b2b0


##############################################################################
#
#  Resources
#
#######################################################################

Resources:

  #
  # Region - VPC and Subnets
  #

  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pVPCCidrRange
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  rPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref pAvailabilityZone1
      CidrBlock: !Ref pPublicSubnetCidrRange1
      MapPublicIpOnLaunch: true
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub 'public-${AWS::StackName}-subnet-${pAvailabilityZone1}'

  rPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref pAvailabilityZone2
      CidrBlock: !Ref pPublicSubnetCidrRange2
      MapPublicIpOnLaunch: true
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub 'public-${AWS::StackName}-subnet-${pAvailabilityZone2}'

  rPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref pAvailabilityZone1
      CidrBlock: !Ref pPrivateSubnetCidrRange1
      MapPublicIpOnLaunch: false
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub 'private-${AWS::StackName}-subnet-${pAvailabilityZone1}'

  rPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref pAvailabilityZone2
      CidrBlock: !Ref pPrivateSubnetCidrRange2
      MapPublicIpOnLaunch: false
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub 'private-${AWS::StackName}-subnet-${pAvailabilityZone2}'

  #
  # Network - Public Gateways and Routes
  #

  # Note: The VPC creates a default route table that you apparently can't
  # access within the cloud formation template.

  rInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-igw'

  rInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref rInternetGateway
      VpcId: !Ref rVPC

  rPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub 'public-${AWS::StackName}-route'

  rPublicRouteToInternetGateway:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway
      RouteTableId: !Ref rPublicRouteTable

  rPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPublicSubnet1
      RouteTableId: !Ref rPublicRouteTable

  rPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPublicSubnet2
      RouteTableId: !Ref rPublicRouteTable

  #
  # Network - Private Gateways and Routes
  #

  rNatGatewayElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: rVPC

  rNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'rNatGatewayElasticIP.AllocationId'
      SubnetId: !Ref rPublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-nat-gw'

  rPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key: Name
          Value: !Sub 'private-${AWS::StackName}-route'

  rPrivateRouteToNatGateway:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref rNatGateway
      RouteTableId: !Ref rPrivateRouteTable

  rPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPrivateSubnet1
      RouteTableId: !Ref rPrivateRouteTable

  rPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPrivateSubnet2
      RouteTableId: !Ref rPrivateRouteTable

  #
  # Network - Public Security Groups
  #

  rPublicWebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for incoming public web traffic'
      VpcId: !Ref rVPC
      SecurityGroupIngress:
        - Description: 'Allows HTTPS traffic from all IPs'
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub 'public-${AWS::StackName}-web-sg'

  rPublicBastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for incoming public bastion traffic'
      VpcId: !Ref rVPC
      SecurityGroupIngress:
        - Description: 'Allows SSH traffic from all IPs'
          IpProtocol: tcp
          CidrIp: 72.21.196.0/24
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub 'public-${AWS::StackName}-bastion-sg'

  #
  # Network - Private Security Groups
  #

  # Note: Ensure this traffic ONLY comes from the public subnets!

  rPrivateReverseProxyContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for incoming reverse proxy traffic'
      VpcId: !Ref rVPC
      SecurityGroupIngress:
        - Description: 'Allows HTTPS traffic from inside the VPC'
          IpProtocol: tcp
          CidrIp: 10.200.0.0/16
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub 'private-${AWS::StackName}-reverse-proxy-sg'

  rPrivateRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for incoming database traffic'
      VpcId: !Ref rVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: 0.0.0.0/0
        # SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentClientStack}-ClientSecurityGroup'}

        #   rPrivateRDSSecurityGroupInSSHBastion:
        #     Type: 'AWS::EC2::SecurityGroupIngress'
        #     Condition: HasSSHBastionSecurityGroup
        #     Properties:
        #       GroupId: !Ref rPrivateRDSSecurityGroup
        #       IpProtocol: tcp
        #       FromPort: 5432
        #       ToPort: 5432
        #       SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'}

  #
  # RDS - Supply Database
  #

  rPrivateRDSSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: !Sub 'Subnet group for the ${AWS::StackName} RDS instance'
      SubnetIds: [!Ref rPrivateSubnet1, !Ref rPrivateSubnet2]

  # make rds MultiAZ false in dev, wooo boy is it slow to create
  rPrivateRDSSupplyDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: 50
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 30
      CopyTagsToSnapshot: true
      DBInstanceClass: 'db.t2.micro'
      DBName: !Sub '${AWS::StackName}SupplyDB'
      DBSubnetGroupName: !Ref rPrivateRDSSubnetGroup
      Engine: postgres
      EngineVersion: '9.6.6'
      MasterUsername: !Sub '${AWS::StackName}User'
      MasterUserPassword: !Sub '${AWS::StackName}Password'
      MultiAZ: false
      PreferredBackupWindow: '09:54-10:24'
      PreferredMaintenanceWindow: 'sat:07:00-sat:07:30'
      StorageType: 'gp2'
      VPCSecurityGroups: [!Ref rPrivateRDSSecurityGroup]

  #
  # EC2 - Public Bastion Hosts
  #

  rPublicBastion1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref pBastionInstanceType
      SecurityGroupIds:
        - !Ref rPublicBastionSecurityGroup
      KeyName: !Ref pBastionKeyPair
      SubnetId: !Ref rPublicSubnet1
      ImageId:
        Fn::FindInMap:
        - mMapRegionArchToAmazonLinux1AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - mMapInstanceTypeToArch
          - Ref: pBastionInstanceType
          - Arch
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          host="${rPrivateRDSSupplyDB.Endpoint.Address}"
          port="5432"
          name="${AWS::StackName}SupplyDB"
          user="${AWS::StackName}User"
          pass="${AWS::StackName}Password"

          echo "$host:$port:$name:$user:$pass" > /home/ec2-user/.pgpass
          chown ec2-user:ec2-user /home/ec2-user/.pgpass
          chmod 600 /home/ec2-user/.pgpass

          yum install postgresql96 -y
      Tags:
        - Key: Name
          Value: !Sub 'public-bastion-${AWS::StackName}-${pAvailabilityZone1}'

  rPublicBastion2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref pBastionInstanceType
      SecurityGroupIds:
        - !Ref rPublicBastionSecurityGroup
      KeyName: !Ref pBastionKeyPair
      SubnetId: !Ref rPublicSubnet2
      ImageId:
        Fn::FindInMap:
        - mMapRegionArchToAmazonLinux1AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - mMapInstanceTypeToArch
          - Ref: pBastionInstanceType
          - Arch
      Tags:
        - Key: Name
          Value: !Sub 'public-bastion-${AWS::StackName}-${pAvailabilityZone2}'

  #
  # EC2 - Public ELB For the Reverse Proxy
  #

  rPublicReverseProxyNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'public-nlb-rp-${AWS::StackName}'
      Scheme: internet-facing
      Subnets: [!Ref rPublicSubnet1, !Ref rPublicSubnet2]
      Type: network

  rFargateReverseProxyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-rp-tg'
      VpcId: !Ref rVPC
      Port: 443
      Protocol: TCP
      HealthCheckPath: /404.html
      HealthCheckProtocol: HTTPS
      TargetType: ip
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: !Ref pELBDeregistrationDelay
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-rp-tg'
    DependsOn: rPublicReverseProxyNLB

  rFargateReverseProxyELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref rPublicReverseProxyNLB
      Port: 443
      Protocol: TCP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref rFargateReverseProxyTargetGroup

  #
  # ECS - Fargate Cluster
  #

  rFargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-fargate-cluster'

  # This role is granted to the ECS containers for execution. This role ties to
  # a AWS managed policy 'AmazonECSTaskExecutionRolePolicy' that allows fargate
  # containers to create/update log streams, and pull from ECR.
  rFargateTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      RoleName: !Sub '${AWS::StackName}-fargate-role'

  #
  # ECS - Fargate Cloud Watch Logs
  #

  # It is absolutely critical to have a log group with fargate! Currently there
  # isn't another log provider, and without this log group you will have zero
  # insight into how the container is running.

  rFargateReverseProxyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/${AWS::StackName}/fargate-rp-service'
      RetentionInDays: 365

  #
  # ECS - Fargate Reverse Proxy Task / Services
  #

  rFargateReverseProxyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-reverse-proxy-td-family'
      Cpu: 1024
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref rFargateTaskExecutionRole
      ContainerDefinitions:
        - Name: reverse-proxy-container
          Cpu: 1024
          Memory: 2048
          Image: !Sub '${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/official-fd-reverse-proxy'
          PortMappings:
            - ContainerPort: 443
          Environment:
            - Name: DEPLOYMENT_TYPE
              Value: !Ref pDeploymentType
            - Name: REVERSE_PROXY_FQDN
              Value: !Ref pReverseProxyDomainName
            - Name: SUPPLY_SERVICE_FQDN
              Value: localhost
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref rFargateReverseProxyLogGroup
              awslogs-stream-prefix: fargate

  rFargateReverseProxyService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${AWS::StackName}-reverse-proxy-service'
      Cluster: !Ref rFargateCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 30
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: [!Ref rPrivateReverseProxyContainerSecurityGroup]
          Subnets: [!Ref rPrivateSubnet1, !Ref rPrivateSubnet2]
      TaskDefinition: !Ref rFargateReverseProxyTaskDefinition
      LoadBalancers:
        - ContainerName: reverse-proxy-container
          ContainerPort: 443
          TargetGroupArn: !Ref rFargateReverseProxyTargetGroup
    DependsOn:
      - rPublicReverseProxyNLB
      - rFargateReverseProxyTargetGroup
      - rFargateReverseProxyELBListener

  # TODO:
  #
  # 2) alb _+ supply services
  # 3.5) DNS Zone?
  # 4) code pipeline
  #


